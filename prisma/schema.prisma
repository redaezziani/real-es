generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum NotificationStatus {
    PENDING
    SENT
    FAILED
    READ
}

enum NotificationPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum HttpMethod {
    GET
    POST
    PUT
    DELETE
    PATCH
}

model Role {
    id          String           @id @default(uuid())
    name        String           @unique
    description String?
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    permissions RolePermission[]
    profiles    Profiles[]
}

model Permission {
    id              String           @id @default(uuid())
    resource        String
    method          HttpMethod
    path            String
    description     String?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    rolePermissions RolePermission[]

    @@unique([resource, method, path])
}

model RolePermission {
    id           String     @id @default(uuid())
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@unique([roleId, permissionId])
}

// Update Profiles model to use Role
model Profiles {
    id     String  @id @default(uuid())
    bio    String?
    phone  String?
    image  String?
    userId String  @unique
    roleId String
    role   Role    @relation(fields: [roleId], references: [id])
    user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    badge  badge   @default(UNVERIFIED)

    @@index([userId])
    @@index([roleId])
}

// Existing models remain the same
enum roles {
    ADMIN
    USER
}

enum badge {
    VERIFIED
    UNVERIFIED
}

model Users {
    id                        String                     @id @default(uuid())
    name                      String
    email                     String                     @unique
    password                  String
    createdAt                 DateTime                   @default(now())
    updatedAt                 DateTime                   @updatedAt
    emailVerified             Boolean                    @default(false)
    verificationToken         String?                    @unique
    verificationTokenExpiry   DateTime?
    passwordResetToken        String?                    @unique
    passwordResetExpiry       DateTime?
    emailVerificationRequests EmailVerificationRequest[]
    passwordResetRequests     PasswordResetRequest[]
    profile                   Profiles?
    NotificationPreference    NotificationPreference?
    Notification              Notification[]
    mangaInteractions MangaInteraction[]

    Comment Comment[]

    CommentLike CommentLike[]

    KeepReading KeepReading[]
}

model EmailVerificationRequest {
    id        Int      @id @default(autoincrement())
    userId    String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    used      Boolean  @default(false)
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
}

model PasswordResetRequest {
    id        Int      @id @default(autoincrement())
    userId    String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    used      Boolean  @default(false)
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
}

enum ScraperPlatform {
    ASHEQ
    ARES
    HIJALA
    AZORA
    ROCKS
}

model Manga {
    id             String          @id @default(uuid())
    title          String
    slug           String?         @unique
    rating         Float           @default(0)
    coverThumbnail String?
    otherTitles    String[]
    description    String
    cover          String
    authors        String[]
    artists        String[]
    platform       ScraperPlatform @default(ASHEQ)
    type           String
    releaseDate    DateTime
    status         String
    genres         String[]
    views          Int             @default(0)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    chapters       Chapter[]
    interactions        MangaInteraction[]
    similarToManga     MangaSimilarity[]  @relation("SourceManga")
    similarFromManga   MangaSimilarity[]  @relation("TargetManga")

    Comment Comment[]

    KeepReading KeepReading[]
}


model MangaInteraction {
    id        String   @id @default(uuid())
    userId    String
    mangaId   String
    type      InteractionType
    createdAt DateTime @default(now())
    manga     Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, mangaId, type])
    @@index([userId, type])
    @@index([mangaId, type])
}

enum InteractionType {
    VIEW
    BOOKMARK
    LIKE
    COMPLETE
    DROPPED
}

model MangaSimilarity {
    id            String   @id @default(uuid())
    sourceMangaId String
    targetMangaId String
    score         Float    // Similarity score between 0 and 1
    sourceManga   Manga    @relation("SourceManga", fields: [sourceMangaId], references: [id], onDelete: Cascade)
    targetManga   Manga    @relation("TargetManga", fields: [targetMangaId], references: [id], onDelete: Cascade)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@unique([sourceMangaId, targetMangaId])
    @@index([sourceMangaId, score])
}

// Add to your schema.prisma

model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mangaId   String
  userId    String
  parentId  String?   // For nested comments
  
  // Relations
  manga     Manga     @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[]

  @@index([mangaId])
  @@index([userId])
  @@index([parentId])
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
}
model Chapter {
    id          String   @id @default(uuid())
    title       String
    slug        String?  @unique
    number      Int
    releaseDate DateTime
    mangaId     String
    views       Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    manga       Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)
    pages       Page[]

    KeepReading KeepReading[]
}

model Page {
    id        String   @id @default(uuid())
    number    Int
    image     String
    chapterId String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model NotificationPreference {
    id           String   @id @default(uuid())
    userId       String   @unique
    emailEnabled Boolean  @default(true)
    pushEnabled  Boolean  @default(true)
    inAppEnabled Boolean  @default(true)
    categories   String[] @default([])
    user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Notification {
    id          String               @id @default(uuid())
    type        String
    title       String
    message     String
    data        Json?
    channels    String[]
    status      NotificationStatus   @default(PENDING)
    priority    NotificationPriority @default(MEDIUM)
    recipientId String?
    recipient   Users?               @relation(fields: [recipientId], references: [id], onDelete: Cascade)
    readAt      DateTime?
    sentAt      DateTime?
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt

    @@index([recipientId, status])
    @@index([type])
}

model EmailSubscription {
  id        String    @id @default(uuid())
  email     String    @unique
  isActive  Boolean   @default(true)
  topics    String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastSentAt DateTime?

  @@index([email])
  @@index([isActive])
}

model KeepReading {
  id        String   @id @default(uuid())
  userId    String
  mangaId   String
  chapterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga     Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, mangaId])
  @@index([userId])
  @@index([mangaId])
}