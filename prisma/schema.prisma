generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    id                        String                     @id @default(uuid())
    name                      String
    email                     String                     @unique
    password                  String
    createdAt                 DateTime                   @default(now())
    updatedAt                 DateTime                   @updatedAt
    emailVerified             Boolean                    @default(false)
    verificationToken         String?                    @unique
    verificationTokenExpiry   DateTime?
    passwordResetToken        String?                    @unique
    passwordResetExpiry       DateTime?
    emailVerificationRequests EmailVerificationRequest[]
    passwordResetRequests     PasswordResetRequest[]
    profile                   Profiles?
}

model EmailVerificationRequest {
    id        Int      @id @default(autoincrement())
    userId    String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    used      Boolean  @default(false)
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
}

model PasswordResetRequest {
    id        Int      @id @default(autoincrement())
    userId    String
    token     String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    used      Boolean  @default(false)
    user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([token])
}

enum roles {
    ADMIN
    USER
}

enum badge {
    VERIFIED
    UNVERIFIED
}

model Profiles {
    id     String  @id @default(uuid())
    bio    String?
    phone  String?
    image  String?
    userId String  @unique
    role   roles   @default(USER)
    user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
    badge  badge   @default(UNVERIFIED)

    @@index([userId])
}

model Manga {
    id          String    @id @default(uuid())
    title       String
    slug        String?   @unique
    rating      Float    @default(0)
    otherTitles String[]
    description String
    cover       String
    authors     String[]
    artists     String[]
    type        String
    releaseDate DateTime
    status      String
    genres      String[]
    views       Int      @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    chapters    Chapter[]
}

model Chapter {
    id          String   @id @default(uuid())
    title       String
    slug        String?  @unique
    number      Int
    releaseDate DateTime
    mangaId     String
    views       Int      @default(0)    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    manga       Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)
    pages       Page[]
}

model Page {
    id        String   @id @default(uuid())
    number    Int
    image     String
    chapterId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}
